################################################### General Settings #############################################
# dataset: train 
dataset.train=J:/workspacedata/weiboMention/LTR/source_v5.txt
#Training data

dataset.test=
#<file> ]	Specify if you want to evaluate the trained model on this data (default=unspecified)

dataset.validate=
#<file> ]	Specify if you want to tune your system on the validation data (default=unspecified)
#If specified, the final model will be the one that performs best on the validation data


dataset.tvs=-1
#<x \in [0..1]> ]	Set train-validation split to be (x)(1.0-x)

dataset.tts=0.8
#<x \in [0..1]> ]	Set train-test split to be (x)(1.0-x). -tts will override -tvs

dataset.kcv=-1
# <k> ]		Specify if you want to perform k-fold cross validation using ONLY the specified training data (default=NoCV)

dataset.qrelFile=
#查询文档相关性

dataset.feature=
# [ <file> ]Feature description file: list features to be considered by the learner, each on a separate line
# If not specified, all features will be used.

ranker=11
#  0: MART (gradient boosted regression tree) 1: RankNet 2: RankBoost 3: AdaRank 
#  4: Coordinate Ascent 6: LambdaMART 7: ListNet 8: Random Forests 9：linear regression
#  10:random 11:Content_Based,12:Bonds_Based,13:Influence_Based 

model.metric2t=NDCG@4
# <metric> ] Metric to optimize on the training data. Supported: MAP, NDCG@k, DCG@k, P@k, RR@k, ERR@k (default=ERR@10)

model.metric2T=MAP
#	<metric> ]	Metric to evaluate on the test data (default to the same as specified for -metric2t)
model.metric2S=10

gmax=1
#It affects the calculation of ERR (default=4, i.e. 5-point scale {0,1,2,3,4})

model.kcvmd=
#kcvModelDir
model.kcvm.name=
#kcvModelFile

model.save.name=

model.preRanklink.file=
# Save systems' performance to file
norm=no-normalization
# <method>]	Normalize feature vectors (default=no-normalization). Method can be:
sum: normalize each feature by the sum of all its values
#				zscore: normalize each feature by its mean/standard deviation

model.save.name=
# <model> Save the learned model to the specified file (default=not-save)

silent=
# Do not print progress messages (which are printed by default)



##################################ranker-shared parameters###################################################
round=10000
reg=0.01
tolerance=0.1
tree=100
leaf=100
shrinkage=100
mls=10
estop=10000
gcc=-1
thread=10
sparse=false

#TREC-format relevance judgment (only affects MAP and NDCG scores



##################################RankNet-specific parameters###################################################
#<T> ]		The number of epochs to train (default=100)

RankNet.layer=1 
#<layer> ]	The number of hidden layers (default=1)

RankNet.node=10
# <node> ]	The number of hidden nodes per layer (default=10)

RankNet.lr=0.01
# <rate> ]		Learning rate (default=0.00005)



################################# RankBoost-specific parameters#############################################
RankBoost.round=300
# <T> ]		The number of rounds to train (default=300)

RankBoost.tc=-1 
#<k> ]		Number of threshold candidates to search. -1 to use all feature values (default=10)



##################################AdaRank-specific parameters#############################################
#AdaRank.round=500
# <T> ]		The number of rounds to train (default=500)

AdaRank.noeq=unspecified
# ]		Train without enqueuing too-strong features (default=unspecified)

AdaRank.tolerance=0.002
# <t> ]	Tolerance between two consecutive rounds of learning (default=0.0020)

AdaRank.max=5
# <times> ]	The maximum number of times can a feature be consecutively selected without changing performance (default=5)




 ###################################Coordinate Ascent-specific parameters#############################################
Coordinate.r=2 
#<k> ]		The number of random restarts (default=2)

Coordinate.i=25 
#<iteration> ]	The number of iterations to search in each dimension (default=25)

Coordinate.tolerance=0.0001
#<t> ]	Performance tolerance between two solutions (default=0.0010)

Coordinate.reg=no-regularization
# <slack> ]	Regularization parameter (default=no-regularization)
LinearRegRank.lambda=0.5



###################################{MART, LambdaMART}-specific parameters#############################################
MART.tree=1000 
#<t> ]		Number of trees (default=1000)

MART.leaf=10 
#<l> ]		Number of leaves for each tree (default=10)

MART.shrinkage=0.1
#<factor> ]	Shrinkage, or learning rate (default=0.1)

MART.tc=-1
# <k> ]		Number of threshold candidates for tree spliting. -1 to use all feature values (default=256)

MART.mls=1
# <n> ]		Min leaf support -- minimum #samples each leaf has to contain (default=1)

MART.estop=100
#<e> ]		Stop early when no improvement is observed on validaton data in e consecutive rounds (default=100)




###################################ListNet-specific parameters#############################################
ListNet.epoch=1500
# <T> ]		The number of epochs to train (default=1500)

ListNet.lr=0.0001
# <rate> ]		Learning rate (default=0.00001)



###################################Random Forests-specific parameters#############################################
RandomForests.bag=300 
#<r> ]		Number of bags (default=300)

RandomForests.srate=1.0
# <r> ]		Sub-sampling rate (default=1.0)

RandomForests.frate=0.3
# <r> ]		Feature sampling rate (default=0.3)

RandomForests.rtype=0 
#<type> ]	Ranker to bag (default=0, i.e. MART)

RandomForests.tree=1
# <t> ]		Number of trees in each bag (default=1)

RandomForests.leaf= 100
#<l> ]		Number of leaves for each tree (default=100)

RandomForests.shrinkage=0.1
#<factor> ]	Shrinkage, or learning rate (default=0.1)

RandomForests.tc=-1
#<k> ]		Number of threshold candidates for tree spliting. -1 to use all feature values (default=256)

RandomForests.mls=1
#<n> ]		Min leaf support -- minimum #samples each leaf has to contain (default=1)



########################### Testing previously saved models#############################################
Testing.model.name= 
Testing.model.dir=
#<model>		The model to load |

Testing.dataset=
Testing.dataset.dir=
#<file>		Test data to evaluate the model (specify either this or -rank but not both) |

Testing.rank= 
#<file>		Rank the samples in the specified file (specify either this or -test but not both)

Testing.metric2T=
# <metric> ]	Metric to evaluate on the test data (default=ERR@10)

Testing.gmax=
# <label> ]	Highest judged relevance label. It affects the calculation of ERR (default=4, i.e. 5-point scale {0,1,2,3,4})

Testing.score=
# <file>]	Store ranker's score for each object being ranked (has to be used with -rank)

Testing.idv=
# ]		Print model performance (in test metric) on individual ranked lists (has to be used with -test)

Testing.norm=
# ]		Normalize feature vectors (similar to -norm for training/tuning)